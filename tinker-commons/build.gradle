apply plugin: 'java-library'
apply plugin: 'maven'

//version LIB_VERSION
//group LIB_GROUP_ID
setVersion(LIB_VERSION)
setGroup(LIB_GROUP_ID)

[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

sourceCompatibility = rootProject.ext.javaVersion
targetCompatibility = rootProject.ext.javaVersion

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    api project(':third-party:aosp-dexutils')
    api project(':third-party:bsdiff-util')
    api project(':third-party:tinker-ziputils')
}

task buildTinkerSdk(type: Copy, dependsOn: [build]) {
    group = "tinker"
    from('build/libs') {
        include '*.jar'
        exclude '*javadoc.jar'
        exclude '*-sources.jar'
    }
    into(rootProject.file("buildSdk/android"))
}

//apply from: rootProject.file('gradle/PublishArtifact.gradle')

boolean isLocalMaven = rootProject.ext.IS_LOCAL_MAVEN
uploadArchives {
    def mavenUrl = isLocalMaven ? '../../repo' : LIB_REPO_URL
    repositories {
        mavenDeployer {
            //设置插件的GAV参数
            pom.version = LIB_VERSION
            pom.artifactId = LIB_ARTIFACT_PLUGIN_GRADLE_ID
            pom.groupId = LIB_GROUP_ID
            pom.packaging = LIB_TYPE_JAR
            //文件发布到下面目录
            repository(url: uri(mavenUrl)) {
                String info = "-----> start upload : ${LIB_POM_NAME} ,and the url is: ${mavenUrl} <----------"
                System.err.println(info)
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }

        }
    }
}